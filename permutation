class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(new ArrayList<>(), nums, result);
        return result;
    }

    private void backtrack(List<Integer> path, int[] nums, List<List<Integer>> result) {
        if (path.size() == nums.length) {
            result.add(new ArrayList<>(path));  // Add a copy of current permutation
            return;
        }

        for (int num : nums) {
            if (path.contains(num)) continue;  // Skip used numbers
            path.add(num);                     // Choose
            backtrack(path, nums, result);     // Explore
            path.remove(path.size() - 1);      // Unchoose (backtrack)
        }
    }
}
