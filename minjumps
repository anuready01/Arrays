class Solution {
    static int minJumps(int[] arr) {
        if (arr.length <= 1) return 0;  // If already at the last index
        if (arr[0] == 0) return -1;  // If first element is 0, cannot move

        int jumps = 1;  // We need at least one jump
        int maxReach = arr[0];  // Maximum index we can reach
        int steps = arr[0];  // Steps left in the current jump

        for (int i = 1; i < arr.length; i++) {
            if (i == arr.length - 1) return jumps;  // Reached the last index

            maxReach = Math.max(maxReach, i + arr[i]);  // Update max reach
            steps--;  // Use one step to move forward

            if (steps == 0) {  // If no steps left
                jumps++;  // Take another jump
                
                if (i >= maxReach) return -1;  // If we can't move further
                
                steps = maxReach - i;  // Reset steps for the new jump range
            }
        }
        return -1;  // Should not reach here
    }
    
    public static void main(String[] args) {
        int[] arr1 = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9};
        System.out.println(minJumps(arr1));  // Output: 3

        int[] arr2 = {1, 4, 3, 2, 6, 7};
        System.out.println(minJumps(arr2));  // Output: 2

        int[] arr3 = {0, 10, 20};
        System.out.println(minJumps(arr3));  // Output: -1
    }
}
