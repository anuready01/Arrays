import java.util.*;

class Solution {
    public int longestSubarrayWithSumK(int[] arr, int k) {
        Map<Integer, Integer> prefixSumIndex = new HashMap<>();
        int sum = 0, maxLength = 0;
        
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            
            if (sum == k) {
                maxLength = i + 1;
            }
            
            if (prefixSumIndex.containsKey(sum - k)) {
                maxLength = Math.max(maxLength, i - prefixSumIndex.get(sum - k));
            }
            
            if (!prefixSumIndex.containsKey(sum)) {
                prefixSumIndex.put(sum, i);
            }
        }
        
        return maxLength;
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        int[] arr1 = {10, 5, 2, 7, 1, -10};
        System.out.println(solution.longestSubarrayWithSumK(arr1, 15)); // Output: 6
        
        int[] arr2 = {-5, 8, -14, 2, 4, 12};
        System.out.println(solution.longestSubarrayWithSumK(arr2, -5)); // Output: 5
        
        int[] arr3 = {10, -10, 20, 30};
        System.out.println(solution.longestSubarrayWithSumK(arr3, 5)); // Output: 0
    }
}
